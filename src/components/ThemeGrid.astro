---
import type { CollectionEntry } from 'astro:content';
import { standardThemes } from '../utils/themeUtils';
import ArticleCard from './ArticleCard.astro';
import ThemeBadge from './ThemeBadge.astro';

interface Props {
  articles: CollectionEntry<'articles'>[];
  title?: string;
  showHeading?: boolean;
  limit?: number;
  layout?: 'grid' | 'masonry' | 'cards';
  columns?: 2 | 3 | 4;
}

const { 
  articles, 
  title = "Articles par thème", 
  showHeading = true,
  limit = 20,
  layout = 'grid',
  columns = 3
} = Astro.props;

// Tri des articles par date de publication (du plus récent au plus ancien)
const sortedArticles = articles
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  .slice(0, limit);

// Regrouper les articles par thème
const articlesByTheme = sortedArticles.reduce((acc, article) => {
  const theme = article.data.tags?.[0] || 'autre';
  const standardTheme = (theme in standardThemes) ? theme : 'autre';
  
  if (!acc[standardTheme]) acc[standardTheme] = [];
  acc[standardTheme].push(article);
  return acc;
}, {} as Record<string, typeof articles>);

// Obtenir tous les thèmes qui ont des articles
const themesWithArticles = Object.keys(articlesByTheme)
  .filter(theme => articlesByTheme[theme].length > 0)
  .sort((a, b) => articlesByTheme[b].length - articlesByTheme[a].length);

// Classes de grille selon le nombre de colonnes
const gridClasses = {
  2: 'grid-cols-1 md:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'
};
---

<div>
  {showHeading && (
    <h2 class="text-3xl font-bold mb-8 text-gray-800 dark:text-white">{title}</h2>
  )}

  {themesWithArticles.map(theme => (
    <section class="mb-12">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center">
          <ThemeBadge theme={theme} size="large" />
          <span class="ml-3 text-gray-500 dark:text-gray-400 text-sm">
            {articlesByTheme[theme].length} article{articlesByTheme[theme].length > 1 ? 's' : ''}
          </span>
        </div>
        <a href={`/blog/themes/${theme}`} class="text-indigo-600 dark:text-indigo-400 text-sm font-medium hover:underline inline-flex items-center">
          Voir tout
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </a>
      </div>
      
      <div class={`grid ${gridClasses[columns]} gap-6`}>
        {articlesByTheme[theme].slice(0, 4).map(article => (
          <ArticleCard article={article} />
        ))}
      </div>
    </section>
  ))}
</div>

<style>
  section {
    animation: fadeIn 0.5s ease-out;
    animation-fill-mode: both;
  }
  
  section:nth-child(1) { animation-delay: 0.1s; }
  section:nth-child(2) { animation-delay: 0.2s; }
  section:nth-child(3) { animation-delay: 0.3s; }
  section:nth-child(4) { animation-delay: 0.4s; }
  section:nth-child(5) { animation-delay: 0.5s; }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 