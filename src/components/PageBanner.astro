---
interface Props {
  title: string;
  description?: string;
  backgroundImage?: string;
  backgroundGradient?: string;
  icon?: string;
  animate?: boolean;
  contentPosition?: 'center' | 'left' | 'right';
}

const {
  title,
  description,
  backgroundImage,
  backgroundGradient = "from-indigo-600 to-blue-700",
  icon,
  animate = true,
  contentPosition = 'center',
} = Astro.props;

// Classes pour le positionnement du contenu
const positionClasses = {
  'center': 'items-center justify-center text-center',
  'left': 'items-start justify-start text-left',
  'right': 'items-end justify-end text-right',
};

// Génération d'un ID unique pour les animations
const bannerId = `banner-${Math.random().toString(36).substring(2, 11)}`;
---

<div class="relative overflow-hidden rounded-2xl mb-12 bg-gradient-to-r {backgroundGradient} h-64 md:h-80">
  <!-- Arrière-plan avec image si fournie -->
  {backgroundImage && (
    <div class="absolute inset-0 z-0">
      <img 
        src={backgroundImage}
        alt="Arrière-plan"
        class="w-full h-full object-cover mix-blend-overlay opacity-30"
        loading="lazy"
      />
    </div>
  )}
  
  <!-- Motifs décoratifs en arrière-plan -->
  <div class="absolute inset-0 z-0 opacity-20">
    <!-- Cercles décoratifs -->
    <div class="absolute bg-white/10 w-40 h-40 rounded-full -top-10 -left-10"></div>
    <div class="absolute bg-white/10 w-60 h-60 rounded-full -bottom-20 -right-20"></div>
    
    <!-- Grille décorative -->
    <div class="grid grid-cols-12 grid-rows-6 gap-1 h-full w-full">
      {Array.from({ length: 12 * 6 }).map((_, i) => (
        <div class="bg-white/5 rounded"></div>
      ))}
    </div>
    
    <!-- Lignes ondulées -->
    {animate && (
      <svg 
        class="absolute inset-0 w-full h-full" 
        xmlns="http://www.w3.org/2000/svg"
        version="1.1"
      >
        <defs>
          <filter id={`${bannerId}-goo`}>
            <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
            <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />
          </filter>
        </defs>
        
        <g filter={`url(#${bannerId}-goo)`}>
          <circle class="particle" cx="10%" cy="50%" r="25" fill="white" opacity="0.3" />
          <circle class="particle" cx="30%" cy="70%" r="25" fill="white" opacity="0.3" />
          <circle class="particle" cx="50%" cy="30%" r="25" fill="white" opacity="0.3" />
          <circle class="particle" cx="70%" cy="60%" r="25" fill="white" opacity="0.3" />
          <circle class="particle" cx="90%" cy="40%" r="25" fill="white" opacity="0.3" />
        </g>
      </svg>
    )}
  </div>
  
  <!-- Contenu principal avec positionnement configurable -->
  <div class={`relative z-10 flex flex-col ${positionClasses[contentPosition]} h-full text-white p-8`}>
    <h1 class={`text-4xl md:text-5xl font-bold mb-4 ${animate ? 'text-shadow-animate' : ''}`}>
      {icon && <span class="mr-3">{icon}</span>}
      <span class="text-transparent bg-clip-text bg-gradient-to-r from-white to-blue-200">{title}</span>
    </h1>
    
    {description && (
      <p class={`text-xl max-w-3xl ${animate ? 'fade-in-animation' : ''}`}>
        {description}
      </p>
    )}
    
    <!-- Slot pour contenu additionnel -->
    <div class="mt-4">
      <slot />
    </div>
  </div>
</div>

<style>
  /* Animation des particules */
  .particle {
    animation: float 8s infinite ease-in-out;
  }
  .particle:nth-child(2) { animation-delay: 1s; }
  .particle:nth-child(3) { animation-delay: 2s; }
  .particle:nth-child(4) { animation-delay: 3s; }
  .particle:nth-child(5) { animation-delay: 4s; }
  
  @keyframes float {
    0%, 100% { transform: translateY(0) translateX(0); }
    25% { transform: translateY(-15px) translateX(15px); }
    50% { transform: translateY(0) translateX(0); }
    75% { transform: translateY(15px) translateX(-15px); }
  }
  
  /* Animation de l'ombre du texte */
  .text-shadow-animate {
    animation: textShadowPulse 4s infinite;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
  }
  
  @keyframes textShadowPulse {
    0%, 100% { text-shadow: 0 0 10px rgba(255, 255, 255, 0.3); }
    50% { text-shadow: 0 0 25px rgba(255, 255, 255, 0.5); }
  }
  
  /* Animation de fondu */
  .fade-in-animation {
    animation: fadeIn 1.5s ease-out;
  }
  
  @keyframes fadeIn {
    0% { opacity: 0; transform: translateY(10px); }
    100% { opacity: 1; transform: translateY(0); }
  }
</style> 