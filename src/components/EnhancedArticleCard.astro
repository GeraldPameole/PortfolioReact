---
import type { CollectionEntry } from 'astro:content';
import { calculateReadingTime } from '../utils/themeUtils';

type Article = CollectionEntry<"articles">;

interface Props {
	article: Article;
	variant?: 'featured' | 'compact' | 'related';
	showRelated?: boolean;
}

const { article, variant = 'featured', showRelated = false } = Astro.props;
const readingTime = calculateReadingTime(article.body);

// Fonction pour déterminer le domaine d'un article
function determinerDomaine(article: Article): string {
  const titre = article.data.title?.toLowerCase() || '';
  const slug = article.slug.toLowerCase();
  
  if (titre.includes('formation') || slug.includes('formation') || titre.includes('apprentissage') || titre.includes('compétences')) {
    return 'formation';
  }
  if (titre.includes('gestion') && (titre.includes('projet') || slug.includes('projet'))) {
    return 'gestion-projet';
  }
  if (titre.includes('web') || titre.includes('javascript') || titre.includes('react') || titre.includes('développement')) {
    return 'web-developpement';
  }
  if (titre.includes('qualité') || titre.includes('iso') || titre.includes('audit') || titre.includes('processus')) {
    return 'gestion-qualite';
  }
  if (titre.includes('commercial') || titre.includes('marketing') || titre.includes('vente') || titre.includes('client')) {
    return 'developpement-commercial';
  }
  
  return 'formation';
}

// Configuration des domaines avec couleurs et icônes
const domainesConfig = {
  'formation': {
    nom: 'Formation & Pédagogie',
    couleur: 'red',
    icone: 'fas fa-graduation-cap',
    classes: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
    gradient: 'from-red-500 to-pink-500'
  },
  'gestion-projet': {
    nom: 'Gestion de Projet',
    couleur: 'blue',
    icone: 'fas fa-project-diagram',
    classes: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    gradient: 'from-blue-500 to-cyan-500'
  },
  'web-developpement': {
    nom: 'Développement Web',
    couleur: 'green',
    icone: 'fas fa-code',
    classes: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
    gradient: 'from-green-500 to-emerald-500'
  },
  'gestion-qualite': {
    nom: 'Gestion de la Qualité',
    couleur: 'purple',
    icone: 'fas fa-award',
    classes: 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
    gradient: 'from-purple-500 to-violet-500'
  },
  'developpement-commercial': {
    nom: 'Développement Commercial',
    couleur: 'orange',
    icone: 'fas fa-chart-line',
    classes: 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
    gradient: 'from-orange-500 to-yellow-500'
  }
};

// Déterminer le domaine de l'article
const domaine = determinerDomaine(article);
const domaineConfig = domainesConfig[domaine as keyof typeof domainesConfig] || domainesConfig['formation'];

// Fonction pour obtenir les tags secondaires
const secondaryTags = article.data.tags?.slice(1, 4) || [];

// Fonction pour obtenir les mots-clés
const keywords = (article.data as any).keywords || [];

// Fonction pour formater la date
function formatDate(date: string) {
  return new Date(date).toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Fonction pour obtenir l'URL de l'image
function getValidImageUrl(url: string | undefined): string | undefined {
  if (!url) return undefined;
  
  if (/^(https?:)?\/\//.test(url)) return url;
  
  if (url.startsWith('/')) return url.replace(/^\/+/, '/');
  
  return url.startsWith('/') ? url : `/${url}`;
}

const imageUrl = getValidImageUrl(article.data.image);
---

{variant === 'featured' && (
  <article class="group relative bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 dark:border-gray-700 hover:-translate-y-2">
    <!-- Image de couverture avec overlay -->
    <div class="relative h-64 overflow-hidden">
      {imageUrl ? (
        <img 
          src={imageUrl} 
          alt={article.data.title} 
          loading="lazy" decoding="async" fetchpriority="low"
          class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          onerror="this.onerror=null; this.src='/placeholder-article.webp';"
        />
      ) : (
        <div class={`w-full h-full bg-gradient-to-br ${domaineConfig.gradient} flex items-center justify-center`}>
          <i class={`${domaineConfig.icone} text-6xl text-white/90`}></i>
        </div>
      )}
      
      <!-- Overlay avec gradient -->
      <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent"></div>
      
      <!-- Badges flottants -->
      <div class="absolute top-4 left-4 flex flex-col gap-2">
        {article.data.featured && (
          <span class="px-3 py-1 text-xs font-bold bg-yellow-400 text-yellow-900 rounded-full shadow-lg animate-pulse">
            ⭐ À la une
          </span>
        )}
        <span class={`px-3 py-1 text-xs font-medium ${domaineConfig.classes} rounded-full shadow-md`}>
          <i class={`${domaineConfig.icone} mr-1`}></i>
          {domaineConfig.nom}
        </span>
        <span class="px-3 py-1 text-xs font-medium bg-white/90 text-gray-800 rounded-full shadow-md">
          <i class="fas fa-clock mr-1"></i>
          {readingTime} min
        </span>
      </div>
      
      <!-- Bouton favori -->
      <button class="absolute top-4 right-4 p-2 rounded-full bg-white/20 backdrop-blur-sm text-white hover:bg-white/30 transition-all duration-300 opacity-0 group-hover:opacity-100" title="Ajouter aux favoris">
        <i class="fas fa-heart text-sm"></i>
      </button>
    </div>
    
    <!-- Contenu de la carte -->
    <div class="p-6">
      <!-- Mots-clés hashtags -->
      {keywords.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {keywords.slice(0, 4).map((keyword: string) => (
            <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800/50 transition-colors cursor-pointer" 
                  title={`Rechercher des articles avec le mot-clé ${keyword}`}>
              {keyword}
            </span>
          ))}
        </div>
      )}
      
      <!-- Titre -->
      <h3 class="text-xl font-bold text-gray-800 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
        <a href={`/articles/${article.slug}`} class="hover:underline">
          {article.data.title}
        </a>
      </h3>
      
      <!-- Description -->
      <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3 leading-relaxed">
        {article.data.description}
      </p>
      
      <!-- Métadonnées -->
      <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4">
        <div class="flex items-center gap-4">
          <span class="flex items-center">
            <i class="fas fa-calendar-alt mr-1"></i>
            {formatDate(article.data.publishDate)}
          </span>
          <span class="flex items-center">
            <i class="fas fa-user mr-1"></i>
            {article.data.author}
          </span>
        </div>
        <div class="flex items-center">
          <i class="fas fa-eye mr-1"></i>
          <span>Expert</span>
        </div>
      </div>
      
      <!-- Tags secondaires -->
      {secondaryTags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {secondaryTags.map((tag: string) => (
            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded text-xs">
              #{tag}
            </span>
          ))}
        </div>
      )}
      
      <!-- Bouton de lecture -->
      <div class="flex items-center justify-between">
        <a href={`/articles/${article.slug}`} 
           class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300 group">
          <span>Lire l'article</span>
          <i class="fas fa-arrow-right ml-2 group-hover:translate-x-1 transition-transform"></i>
        </a>
        
        <div class="flex items-center gap-2">
          <button class="p-2 text-gray-400 hover:text-blue-600 transition-colors" title="Partager">
            <i class="fas fa-share-alt"></i>
          </button>
          <button class="p-2 text-gray-400 hover:text-red-600 transition-colors" title="Ajouter aux favoris">
            <i class="fas fa-bookmark"></i>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Indicateur de progression (pour les articles lus) -->
    <div class="absolute bottom-0 left-0 right-0 h-1 bg-gray-200 dark:bg-gray-700">
      <div class="h-full bg-blue-600 transition-all duration-500" style="width: 0%"></div>
    </div>
  </article>
)}

{variant === 'compact' && (
  <article class="group bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden border border-gray-100 dark:border-gray-700">
    <div class="flex">
      <!-- Image compacte -->
      <div class="w-24 h-24 flex-shrink-0">
        {imageUrl ? (
          <img 
            src={imageUrl} 
            alt={article.data.title} 
            loading="lazy" decoding="async" fetchpriority="low"
            class="w-full h-full object-cover"
          />
        ) : (
          <div class={`w-full h-full bg-gradient-to-br ${domaineConfig.gradient} flex items-center justify-center`}>
            <i class={`${domaineConfig.icone} text-xl text-white/90`}></i>
          </div>
        )}
      </div>
      
      <!-- Contenu compact -->
      <div class="flex-1 p-4">
        <div class="flex items-center gap-2 mb-2">
          {article.data.featured && (
            <span class="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 rounded-full">
              ⭐
            </span>
          )}
          <span class={`px-2 py-1 text-xs font-medium ${domaineConfig.classes} rounded-full`}>
            {domaineConfig.nom}
          </span>
        </div>
        
        <h4 class="font-semibold text-gray-800 dark:text-white mb-1 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
          <a href={`/articles/${article.slug}`}>
            {article.data.title}
          </a>
        </h4>
        
        <p class="text-sm text-gray-600 dark:text-gray-300 mb-2 line-clamp-2">
          {article.data.description}
        </p>
        
        <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          <span>{readingTime} min</span>
          <span>{formatDate(article.data.publishDate)}</span>
        </div>
      </div>
    </div>
  </article>
)}

{variant === 'related' && (
  <article class="group bg-white dark:bg-gray-800 rounded-lg p-4 hover:shadow-md transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600">
    <div class="flex items-start gap-3">
      <!-- Icône du domaine -->
      <div class={`w-10 h-10 rounded-lg bg-gradient-to-br ${domaineConfig.gradient} flex items-center justify-center flex-shrink-0`}>
        <i class={`${domaineConfig.icone} text-white text-sm`}></i>
      </div>
      
      <!-- Contenu -->
      <div class="flex-1 min-w-0">
        <div class="flex items-center gap-2 mb-1">
          <span class={`px-2 py-1 text-xs font-medium ${domaineConfig.classes} rounded-full`}>
            {domaineConfig.nom}
          </span>
          <span class="text-xs text-gray-500 dark:text-gray-400">
            {readingTime} min
          </span>
        </div>
        
        <h5 class="font-semibold text-gray-800 dark:text-white mb-1 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
          <a href={`/articles/${article.slug}`}>
            {article.data.title}
          </a>
        </h5>
        
        <p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
          {article.data.description}
        </p>
      </div>
    </div>
  </article>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
