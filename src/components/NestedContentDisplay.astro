---
interface Props {
  title: string;
  description?: string;
  publishDate?: string;
  author?: string;
  img?: string;
  img_alt?: string;
  tags?: string[];
  content: any;
}

const { title, description, publishDate, author, img, img_alt, tags, content } = Astro.props;

function formatDate(date: string | Date) {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  return dateObj.toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<div class="nested-content">
  <div class="nested-content-header">
    <h1>{title}</h1>
    {description && (
      <p class="nested-content-subtitle">{description}</p>
    )}
  </div>

  {publishDate || author || tags ? (
    <div class="nested-content-meta">
      {publishDate && (
        <div class="meta-item">
          <svg class="meta-icon" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
          </svg>
          <span>{formatDate(publishDate)}</span>
        </div>
      )}
      
      {author && (
        <div class="meta-item">
          <svg class="meta-icon" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
          </svg>
          <span>{author}</span>
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <div class="meta-item">
          <svg class="meta-icon" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
          </svg>
          <span>{tags.join(', ')}</span>
        </div>
      )}
    </div>
  ) : null}

  {img && (
    <div class="nested-content-image-container">
      <img 
        src={img} 
        alt={img_alt || title} 
        class="nested-content-image"
        loading="lazy"
      />
    </div>
  )}

  <div class="nested-content-body">
    <div class="content-typography">
      <content.Content />
    </div>
  </div>
</div>

<style>
  .nested-content-image-container {
    text-align: center;
    margin: var(--content-spacing-lg) 0;
  }

  .nested-content-image {
    max-width: 100%;
    height: auto;
    border-radius: var(--content-border-radius-lg);
    box-shadow: var(--content-shadow-md);
    border: 3px solid white;
    
    .dark & {
      border-color: var(--color-gray-700);
    }
  }

  .nested-content-body {
    margin-top: var(--content-spacing-xl);
  }

  /* Amélioration de la lisibilité du contenu */
  .content-typography {
    /* Paragraphes */
    p {
      margin-bottom: var(--content-spacing-md);
      line-height: var(--leading-relaxed);
      color: var(--color-gray-800);
      font-size: var(--text-base);
      
      .dark & {
        color: var(--color-gray-200);
      }
    }

    /* Listes */
    ul, ol {
      margin: var(--content-spacing-md) 0;
      padding-left: var(--content-spacing-lg);
      
      li {
        margin-bottom: var(--content-spacing-sm);
        line-height: var(--leading-relaxed);
        color: var(--color-gray-800);
        font-size: var(--text-base);
        
        .dark & {
          color: var(--color-gray-200);
        }
        
        &::marker {
          color: var(--color-secondary-warm);
          
          .dark & {
            color: var(--color-tertiary-light);
          }
        }
      }
    }

    /* Citations */
    blockquote {
      margin: var(--content-spacing-lg) 0;
      padding: var(--content-spacing-md) var(--content-spacing-lg);
      border-left: 4px solid var(--color-secondary-warm);
      background: rgba(255, 255, 255, 0.5);
      border-radius: 0 var(--content-border-radius) var(--content-border-radius) 0;
      font-style: italic;
      
      .dark & {
        background: rgba(55, 65, 81, 0.5);
        border-left-color: var(--color-tertiary-light);
      }
      
      p {
        margin: 0;
        color: var(--color-gray-700);
        
        .dark & {
          color: var(--color-gray-300);
        }
      }
    }

    /* Code inline */
    code {
      background: rgba(0, 0, 0, 0.1);
      padding: 0.2em 0.4em;
      border-radius: 0.25rem;
      font-family: var(--font-mono);
      font-size: 0.9em;
      color: var(--color-primary-dark);
      
      .dark & {
        background: rgba(255, 255, 255, 0.1);
        color: var(--color-tertiary-light);
      }
    }

    /* Blocs de code */
    pre {
      background: var(--color-primary-dark);
      color: var(--color-tertiary-light);
      padding: var(--content-spacing-md);
      border-radius: var(--content-border-radius);
      overflow-x: auto;
      margin: var(--content-spacing-lg) 0;
      box-shadow: var(--content-shadow-md);
      
      code {
        background: none;
        padding: 0;
        color: inherit;
      }
    }

    /* Tableaux */
    table {
      width: 100%;
      border-collapse: collapse;
      margin: var(--content-spacing-lg) 0;
      background: rgba(255, 255, 255, 0.8);
      border-radius: var(--content-border-radius);
      overflow: hidden;
      box-shadow: var(--content-shadow-sm);
      
      .dark & {
        background: rgba(55, 65, 81, 0.8);
      }
      
      th, td {
        padding: var(--content-spacing-sm);
        text-align: left;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        
        .dark & {
          border-bottom-color: rgba(255, 255, 255, 0.1);
        }
      }
      
      th {
        background: var(--color-secondary-warm);
        color: white;
        font-weight: 600;
        
        .dark & {
          background: var(--color-tertiary-light);
          color: var(--color-primary-dark);
        }
      }
      
      tr:hover {
        background: rgba(0, 0, 0, 0.05);
        
        .dark & {
          background: rgba(255, 255, 255, 0.05);
        }
      }
    }

    /* Séparateurs */
    hr {
      border: none;
      height: 2px;
      background: linear-gradient(90deg, transparent, var(--color-secondary-warm), transparent);
      margin: var(--content-spacing-xl) 0;
      
      .dark & {
        background: linear-gradient(90deg, transparent, var(--color-tertiary-light), transparent);
      }
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .nested-content-image {
      border-width: 2px;
    }
    
    .content-typography {
      p, li {
        font-size: var(--text-sm);
      }
    }
  }
</style>

