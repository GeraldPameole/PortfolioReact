---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
	const articles = await getCollection('articles');
	
	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article }
	}));
}

const { article } = Astro.props;
const { Content } = await article.render();

function formatDate(date: Date) {
	return date.toLocaleDateString('fr-FR', {
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	});
}

// Mapping des thèmes pour l'affichage
const themeLabels: Record<string, string> = {
	"developpement-web": "Développement Web",
	"management": "Management & Leadership",
	"productivite": "Productivité & Organisation", 
	"marketing": "Marketing Digital",
	"carriere": "Carrière & Formation"
};

// Pour calculer le temps de lecture approximatif
function getReadingTime(content: string) {
	const wordsPerMinute = 200;
	const text = content.replace(/(<([^>]+)>)/gi, '');
	const numberOfWords = text.split(/\s/g).length;
	return Math.ceil(numberOfWords / wordsPerMinute);
}

// Extraire l'estimation du temps de lecture (approximatif)
const readingTime = 5; // Valeur par défaut en minutes
---

<BaseLayout 
	title={article.data.title}
	description={article.data.description}
>
	<article class="container mx-auto px-4 py-8">
		<header class="mb-8">
			<h1 class="text-4xl font-bold mb-4">{article.data.title}</h1>
			<div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
				<time datetime={article.data.publishDate.toISOString()}>
					{formatDate(article.data.publishDate)}
				</time>
				{article.data.author && (
					<>
						<span class="mx-2">•</span>
						<span>{article.data.author}</span>
					</>
				)}
			</div>
			{article.data.image && (
				<img
					src={article.data.image}
					alt={article.data.title}
					class="w-full h-64 object-cover rounded-lg mb-8"
				/>
			)}
		</header>
		<div class="prose dark:prose-invert max-w-none">
			<Content />
		</div>
	</article>
</BaseLayout>

<style>
	.container {
		max-width: 800px;
	}

	.prose {
		font-size: 1.125rem;
		line-height: 1.75;
	}

	.prose h2 {
		font-size: 1.875rem;
		margin-top: 2.5rem;
		margin-bottom: 1.25rem;
	}

	.prose h3 {
		font-size: 1.5rem;
		margin-top: 2rem;
		margin-bottom: 1rem;
	}

	.prose p {
		margin-bottom: 1.5rem;
	}

	.prose ul,
	.prose ol {
		margin-left: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.prose li {
		margin-bottom: 0.5rem;
	}

	.prose img {
		border-radius: 0.5rem;
		margin: 2rem 0;
	}

	.prose blockquote {
		border-left: 4px solid var(--accent-regular);
		padding-left: 1rem;
		margin: 1.5rem 0;
		font-style: italic;
	}

	.prose code {
		background-color: var(--gray-999);
		padding: 0.2rem 0.4rem;
		border-radius: 0.25rem;
		font-size: 0.875em;
	}

	.prose pre {
		background-color: var(--gray-999);
		padding: 1rem;
		border-radius: 0.5rem;
		overflow-x: auto;
		margin: 1.5rem 0;
	}

	.prose pre code {
		background-color: transparent;
		padding: 0;
		border-radius: 0;
	}
</style> 